"""
This file is auto-generated by the CCVShop API code generator.

⚠️ Do not edit manually – changes will be overwritten.
Endpoints:
- DELETE /:version/usergroupstaggeredpriceadjustments/:id/ → Deleting an adjustment
- GET /:version/usergroupstaggeredpriceadjustments/ → Get all adjustments
- GET /:version/usergroupstaggeredpriceadjustments/:id/ → Get one adjustment by id
- PATCH /:version/usergroupstaggeredpriceadjustments/:id/ → Update an existing adjustment
- POST /:version/usergroupstaggeredpriceadjustments/ → Create a new adjustment for an user for a product staggered price
"""

from typing import Dict
from ccv.result import CCVShopResult
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from ccv.client import CCVClient

class Usergroupstaggeredpriceadjustments:
    def __init__(self, client: 'CCVClient'):
        """
        UserGroupStaggeredPriceAdjustments are adjusted product staggered prices for a specific usergroup. This feature is only available if B2B is enabled.
        """
        self.client: 'CCVClient' = client

    def deleting_an_adjustment(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Deleting an adjustment
        """
        return self.client._delete(
            uri_path=f"/api/rest/v1/usergroupstaggeredpriceadjustments/{id}/",
        )

    def get_all_adjustments(
        self,
        per_page: int = 100,
        total_pages: int = 1,
        **params,
    ) -> CCVShopResult:
        """
        Get all adjustments
        """
        return self.client._get_paged(
            uri_path="/api/rest/v1/usergroupstaggeredpriceadjustments/",
            per_page=per_page,
            total_pages=total_pages,
            **params,
        )

    def get_one_adjustment_by_id(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Get one adjustment by id
        """
        return self.client._get(
            uri_path=f"/api/rest/v1/usergroupstaggeredpriceadjustments/{id}/",
        )

    def update_an_existing_adjustment(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Update an existing adjustment
        """
        return self.client._patch(
            uri_path=f"/api/rest/v1/usergroupstaggeredpriceadjustments/{id}/",
            body=body,
        )

    def create_a_new_adjustment_for_an_user_for_a_product_staggered_price(
        self,
        body: Dict,
    ) -> CCVShopResult:
        """
        Create a new adjustment for an user for a product staggered price
        """
        return self.client._post(
            uri_path="/api/rest/v1/usergroupstaggeredpriceadjustments/",
            body=body,
        )