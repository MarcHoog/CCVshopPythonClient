"""
This file is auto-generated by the CCVShop API code generator.

⚠️ Do not edit manually – changes will be overwritten.
Endpoints:
- GET /:version/products/:id/attributecombinations/ → Get all attribute combinations  of this product
- GET /:version/attributecombinations/:id/ → Gets one attribute combination
- PATCH /:version/attributecombinations/:id/ → Patch a AttributeCombination
"""

from typing import Dict
from ccv.result import CCVShopResult
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from ccv.client import CCVClient

class Attributecombinations:
    def __init__(self, client: 'CCVClient'):
        """
        An attribute combination, each product can have one or more attribute. two attributes makes a combination.
        """
        self.client: 'CCVClient' = client

    def get_all_attribute_combinations__of_this_product(
        self,
        id: str,
        per_page: int = 100,
        total_pages: int = 1,
        **params,
    ) -> CCVShopResult:
        """
        Get all attribute combinations  of this product
        """
        return self.client._get_paged(
            uri_path=f"/api/rest/v1/products/{id}/attributecombinations/",
            per_page=per_page,
            total_pages=total_pages,
            **params,
        )

    def gets_one_attribute_combination(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Gets one attribute combination
        """
        return self.client._get(
            uri_path=f"/api/rest/v1/attributecombinations/{id}/",
        )

    def patch_a_attributecombination(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Patch a AttributeCombination
        """
        return self.client._patch(
            uri_path=f"/api/rest/v1/attributecombinations/{id}/",
            body=body,
        )