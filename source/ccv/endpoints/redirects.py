"""
This file is auto-generated by the CCVShop API code generator.

⚠️ Do not edit manually – changes will be overwritten.
Endpoints:
- DELETE /:version/redirects/:id/ → Deletes a single redirect url
- GET /:version/redirects/:id/ → Get one redirect url by Id
- GET /:version/redirects/ → Get all redirect urls as a collection
- PATCH /:version/redirects/:id/ → Updates an existing redirect
- POST /:version/redirects/ → Creates a new redirect
"""

from typing import Dict
from ccv.result import CCVShopResult
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from ccv.client import CCVClient

class Redirects:
    def __init__(self, client: 'CCVClient'):
        """
        This resource describes redirects. Redirects are http 301 forwards from source_url to target_url. This can for instance be used to keep SEO ranking of outdated urls. This source_url will be relative and must be unique. The redirects will work for any domain resolving to this webshop. The target_url can be relative or absolute. It can also be a different domain. Carefully when creating circular references.
        """
        self.client: 'CCVClient' = client

    def deletes_a_single_redirect_url(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Deletes a single redirect url
        """
        return self.client._delete(
            uri_path=f"/api/rest/v1/redirects/{id}/",
        )

    def get_one_redirect_url_by_id(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Get one redirect url by Id
        """
        return self.client._get(
            uri_path=f"/api/rest/v1/redirects/{id}/",
        )

    def get_all_redirect_urls_as_a_collection(
        self,
        per_page: int = 100,
        total_pages: int = 1,
        **params,
    ) -> CCVShopResult:
        """
        Get all redirect urls as a collection
        """
        return self.client._get_paged(
            uri_path="/api/rest/v1/redirects/",
            per_page=per_page,
            total_pages=total_pages,
            **params,
        )

    def updates_an_existing_redirect(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Updates an existing redirect
        """
        return self.client._patch(
            uri_path=f"/api/rest/v1/redirects/{id}/",
            body=body,
        )

    def creates_a_new_redirect(
        self,
        body: Dict,
    ) -> CCVShopResult:
        """
        Creates a new redirect
        """
        return self.client._post(
            uri_path="/api/rest/v1/redirects/",
            body=body,
        )