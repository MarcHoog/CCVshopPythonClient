"""
This file is auto-generated by the CCVShop API code generator.

⚠️ Do not edit manually – changes will be overwritten.
Endpoints:
- DELETE /:version/productattachments/:id/ → Delete a product attachment
- GET /:version/products/:id/productattachments/ → Get all attachments of this product
- GET /:version/productattachments/:id/ → Get one product attachment
- PATCH /:version/productattachments/:id/ → Patch a product attachment
- POST /:version/products/:id/productattachments/ → Add an attachment to this product
"""

from typing import Dict
from ccv.result import CCVShopResult
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from ccv.client import CCVClient

class Productattachments:
    def __init__(self, client: 'CCVClient'):
        """
        Each product can have several files attached. For instance, these files could include a pdf manual.
        """
        self.client: 'CCVClient' = client

    def delete_a_product_attachment(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Delete a product attachment
        """
        return self.client._delete(
            uri_path=f"/api/rest/v1/productattachments/{id}/",
        )

    def get_all_attachments_of_this_product(
        self,
        id: str,
        per_page: int = 100,
        total_pages: int = 1,
        **params,
    ) -> CCVShopResult:
        """
        Get all attachments of this product
        """
        return self.client._get_paged(
            uri_path=f"/api/rest/v1/products/{id}/productattachments/",
            per_page=per_page,
            total_pages=total_pages,
            **params,
        )

    def get_one_product_attachment(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Get one product attachment
        """
        return self.client._get(
            uri_path=f"/api/rest/v1/productattachments/{id}/",
        )

    def patch_a_product_attachment(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Patch a product attachment
        """
        return self.client._patch(
            uri_path=f"/api/rest/v1/productattachments/{id}/",
            body=body,
        )

    def add_an_attachment_to_this_product(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Add an attachment to this product
        """
        return self.client._post(
            uri_path=f"/api/rest/v1/products/{id}/productattachments/",
            body=body,
        )