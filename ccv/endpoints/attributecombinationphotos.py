"""
This file is auto-generated by the CCVShop API code generator.

⚠️ Do not edit manually – changes will be overwritten.
Endpoints:
- DELETE /:version/attributecombinationphotos/:id/ → Delete a AttributeCombinationPhoto.
- GET /:version/attributecombinations/:id/attributecombinationphotos/ → Gets all values for the attribute.
- GET /:version/attributecombinationphotos/:id/ → Gets a single Attribute Combination Photo.
- OPTIONS /:version/attributecombinationphotos/ → None
- PATCH /:version/attributecombinationphotos/:id/ → Patch a AttributeCombinationPhoto.
- POST /:version/attributecombinations/:id/attributecombinationphotos/ → Post a Attribute combination photo.
"""

from typing import Any, List, Dict
from ..result import CCVShopResult
from .endpoint import CCVApiEndpoints

class Attributecombinationphotos(CCVApiEndpoints):
    """
    An photo for an attribute combination, each combination can have the same photo, or different photos for each combination.
    """

    def delete_a_attributecombinationphoto(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Delete a AttributeCombinationPhoto.
        """
        return self.client._delete(
            uri_path=f"/api/rest/v1/attributecombinationphotos/{id}/",
        )

    def gets_all_values_for_the_attribute(
        self,
        id: str,
        per_page: int = 100,
        total_pages: int = 1,
        **params,
    ) -> CCVShopResult:
        """
        Gets all values for the attribute.
        """
        return self.client._get_paged(
            uri_path=f"/api/rest/v1/attributecombinations/{id}/attributecombinationphotos/",
            per_page=per_page,
            total_pages=total_pages,
            **params,
        )

    def gets_a_single_attribute_combination_photo(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Gets a single Attribute Combination Photo.
        """
        return self.client._get(
            uri_path=f"/api/rest/v1/attributecombinationphotos/{id}/",
        )

    def patch_a_attributecombinationphoto(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Patch a AttributeCombinationPhoto.
        """
        return self.client._patch(
            uri_path=f"/api/rest/v1/attributecombinationphotos/{id}/",
            body=body,
        )

    def post_a_attribute_combination_photo(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Post a Attribute combination photo.
        """
        return self.client._post(
            uri_path=f"/api/rest/v1/attributecombinations/{id}/attributecombinationphotos/",
            body=body,
        )