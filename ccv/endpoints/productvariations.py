"""
This file is auto-generated by the CCVShop API code generator.

⚠️ Do not edit manually – changes will be overwritten.
Endpoints:
- DELETE /:version/productvariations/:id/ → Delete a variation
- GET /:version/products/:id/productvariations/ → Get all variations from this product
- GET /:version/productvariations/:id/ → Get a single variation
- PATCH /:version/productvariations/:id/ → Update an exisiting variation
- POST /:version/products/:id/productvariations/ → Add a new variation to this product
"""

from typing import Dict
from ccv.result import CCVShopResult
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from ccv.client import CCVClient

class Productvariations:
    def __init__(self, client: 'CCVClient'):
        """
        A product variation is a link to another similar product, but in a different colour for instance. The link is bidirectional, if Product A is linked to B, B is linked to A. Inactive variations are hidden in the webshop. Variations created based on product number are marked as auto_created.
        """
        self.client: 'CCVClient' = client

    def delete_a_variation(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Delete a variation
        """
        return self.client._delete(
            uri_path=f"/api/rest/v1/productvariations/{id}/",
        )

    def get_all_variations_from_this_product(
        self,
        id: str,
        per_page: int = 100,
        total_pages: int = 1,
        **params,
    ) -> CCVShopResult:
        """
        Get all variations from this product
        """
        return self.client._get_paged(
            uri_path=f"/api/rest/v1/products/{id}/productvariations/",
            per_page=per_page,
            total_pages=total_pages,
            **params,
        )

    def get_a_single_variation(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Get a single variation
        """
        return self.client._get(
            uri_path=f"/api/rest/v1/productvariations/{id}/",
        )

    def update_an_exisiting_variation(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Update an exisiting variation
        """
        return self.client._patch(
            uri_path=f"/api/rest/v1/productvariations/{id}/",
            body=body,
        )

    def add_a_new_variation_to_this_product(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Add a new variation to this product
        """
        return self.client._post(
            uri_path=f"/api/rest/v1/products/{id}/productvariations/",
            body=body,
        )