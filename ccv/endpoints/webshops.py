"""
This file is auto-generated by the CCVShop API code generator.

⚠️ Do not edit manually – changes will be overwritten.
Endpoints:
- GET /:version/merchant/:id/webshops/ → Gets a collection with all webshops linked to this merchant.
- GET /:version/webshops/:id/ → Get one webshop.
- GET /:version/webshops/ → Get all webshops.
- GET /:version/products/:id/webshops/ → Get all webshop resources to which this product is connect. If the product is not a multishop product, this will be empty.
- GET /:version/webshops/:id/webshops/ → Get all users that belong to this usergroup.
- OPTIONS /:version/webshops/ → None
- POST /:version/products/:id/webshops/ → Connects this product to target webshop. This is only available if this API is a multishop system.
- PUT /:version/products/:id/webshops/ → Replaces all connection of this product to webshops. Use an empty collection to remove all connections. This is only available if this API is a multishop system.
"""

from typing import Any, List, Dict
from ..result import CCVShopResult
from .endpoint import CCVApiEndpoints

class Webshops(CCVApiEndpoints):
    """
    Describes info concerning the webshop. If this is a multishop system, it will have child shops.
    """

    def gets_a_collection_with_all_webshops_linked_to_this_merchant(
        self,
        id: str,
        per_page: int = 100,
        total_pages: int = 1,
        **params,
    ) -> CCVShopResult:
        """
        Gets a collection with all webshops linked to this merchant.
        """
        return self.client._get_paged(
            uri_path=f"/api/rest/v1/merchant/{id}/webshops/",
            per_page=per_page,
            total_pages=total_pages,
            **params,
        )

    def get_one_webshop(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Get one webshop.
        """
        return self.client._get(
            uri_path=f"/api/rest/v1/webshops/{id}/",
        )

    def get_all_webshops(
        self,
        per_page: int = 100,
        total_pages: int = 1,
        **params,
    ) -> CCVShopResult:
        """
        Get all webshops.
        """
        return self.client._get_paged(
            uri_path="/api/rest/v1/webshops/",
            per_page=per_page,
            total_pages=total_pages,
            **params,
        )

    def get_all_webshop_resources_to_which_this_product_is_connect_if_the_product_is_not_a_multishop_product,_this_will_be_empty(
        self,
        id: str,
        per_page: int = 100,
        total_pages: int = 1,
        **params,
    ) -> CCVShopResult:
        """
        Get all webshop resources to which this product is connect. If the product is not a multishop product, this will be empty.
        """
        return self.client._get_paged(
            uri_path=f"/api/rest/v1/products/{id}/webshops/",
            per_page=per_page,
            total_pages=total_pages,
            **params,
        )

    def get_all_users_that_belong_to_this_usergroup(
        self,
        id: str,
        per_page: int = 100,
        total_pages: int = 1,
        **params,
    ) -> CCVShopResult:
        """
        Get all users that belong to this usergroup.
        """
        return self.client._get_paged(
            uri_path=f"/api/rest/v1/webshops/{id}/webshops/",
            per_page=per_page,
            total_pages=total_pages,
            **params,
        )

    def connects_this_product_to_target_webshop_this_is_only_available_if_this_api_is_a_multishop_system(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Connects this product to target webshop. This is only available if this API is a multishop system.
        """
        return self.client._post(
            uri_path=f"/api/rest/v1/products/{id}/webshops/",
            body=body,
        )

    def replaces_all_connection_of_this_product_to_webshops_use_an_empty_collection_to_remove_all_connections_this_is_only_available_if_this_api_is_a_multishop_system(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Replaces all connection of this product to webshops. Use an empty collection to remove all connections. This is only available if this API is a multishop system.
        """
        return self.client._put(
            uri_path=f"/api/rest/v1/products/{id}/webshops/",
        )