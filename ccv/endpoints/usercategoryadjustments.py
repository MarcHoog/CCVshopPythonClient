"""
This file is auto-generated by the CCVShop API code generator.

⚠️ Do not edit manually – changes will be overwritten.
Endpoints:
- DELETE /:version/usercategoryadjustments/:id/ → Deleting an adjustment. Prices and visibility will be reverted to default for this user.
- GET /:version/usercategoryadjustments/ → Get all adjustments. This can only be done by either user_id or category_id or both.
- GET /:version/usercategoryadjustments/:id/ → Get one adjustment by id.
- OPTIONS /:version/usercategoryadjustments/ → None
- PATCH /:version/usercategoryadjustments/:id/ → Update an existing adjustment.
- POST /:version/usercategoryadjustments/ → Create a new adjustment for an user.
"""

from typing import Any, List, Dict
from ..result import CCVShopResult
from .endpoint import CCVApiEndpoints

class Usercategoryadjustments(CCVApiEndpoints):
    """
    UserCategoryAdjustments are adjusted product prices or visibility for a specific user. This feature is only available if B2B is enabled.
    """

    def deleting_an_adjustment_prices_and_visibility_will_be_reverted_to_default_for_this_user(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Deleting an adjustment. Prices and visibility will be reverted to default for this user.
        """
        return self.client._delete(
            uri_path=f"/api/rest/v1/usercategoryadjustments/{id}/",
        )

    def get_all_adjustments_this_can_only_be_done_by_either_user_id_or_category_id_or_both(
        self,
        per_page: int = 100,
        total_pages: int = 1,
        **params,
    ) -> CCVShopResult:
        """
        Get all adjustments. This can only be done by either user_id or category_id or both.
        """
        return self.client._get_paged(
            uri_path="/api/rest/v1/usercategoryadjustments/",
            per_page=per_page,
            total_pages=total_pages,
            **params,
        )

    def get_one_adjustment_by_id(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Get one adjustment by id.
        """
        return self.client._get(
            uri_path=f"/api/rest/v1/usercategoryadjustments/{id}/",
        )

    def update_an_existing_adjustment(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Update an existing adjustment.
        """
        return self.client._patch(
            uri_path=f"/api/rest/v1/usercategoryadjustments/{id}/",
            body=body,
        )

    def create_a_new_adjustment_for_an_user(
        self,
        body: Dict,
    ) -> CCVShopResult:
        """
        Create a new adjustment for an user.
        """
        return self.client._post(
            uri_path="/api/rest/v1/usercategoryadjustments/",
            body=body,
        )