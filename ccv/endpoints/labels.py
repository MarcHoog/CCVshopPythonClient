"""
This file is auto-generated by the CCVShop API code generator.

⚠️ Do not edit manually – changes will be overwritten.
Endpoints:
- DELETE /:version/labels/:id/ → Deletes this label and all the links to other resources
- GET /:version/labels/ → Gets all labels created by this api key
- GET /:version/labels/:id/ → Gets one label
- PATCH /:version/labels/:id/ → Edits an existing label
- POST /:version/labels/ → Creates a new label
"""

from typing import Dict
from ccv.result import CCVShopResult
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from ccv.client import CCVClient

class Labels:
    def __init__(self, client: 'CCVClient'):
        """
        Labels can be used to mark or eartag a resource and are visible in the webshop's backend. Optional labels can be added as filter in the webshop's backend. Labels can be linked to other resources (like Product, Orders and Invoices).
        """
        self.client: 'CCVClient' = client

    def deletes_this_label_and_all_the_links_to_other_resources(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Deletes this label and all the links to other resources
        """
        return self.client._delete(
            uri_path=f"/api/rest/v1/labels/{id}/",
        )

    def gets_all_labels_created_by_this_api_key(
        self,
        per_page: int = 100,
        total_pages: int = 1,
        **params,
    ) -> CCVShopResult:
        """
        Gets all labels created by this api key
        """
        return self.client._get_paged(
            uri_path="/api/rest/v1/labels/",
            per_page=per_page,
            total_pages=total_pages,
            **params,
        )

    def gets_one_label(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Gets one label
        """
        return self.client._get(
            uri_path=f"/api/rest/v1/labels/{id}/",
        )

    def edits_an_existing_label(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Edits an existing label
        """
        return self.client._patch(
            uri_path=f"/api/rest/v1/labels/{id}/",
            body=body,
        )

    def creates_a_new_label(
        self,
        body: Dict,
    ) -> CCVShopResult:
        """
        Creates a new label
        """
        return self.client._post(
            uri_path="/api/rest/v1/labels/",
            body=body,
        )