"""
This file is auto-generated by the CCVShop API code generator.

⚠️ Do not edit manually – changes will be overwritten.
Endpoints:
- DELETE /:version/productphotos/:id/ → Delete a product photo.
- GET /:version/products/:id/productphotos/ → Get all photos of this product.
- GET /:version/productphotos/:id/ → Get one product photo.
- OPTIONS /:version/productphotos/ → None
- PATCH /:version/productphotos/:id/ → Patch a product photo.
- POST /:version/products/:id/productphotos/ → Add a photo to this product.
- PUT /:version/products/:id/productphotos/ → Replace a product photo collection of an existing product. All existing photos will be deleted. With an empty collection you can achieve a DELETE ALL product photos.
"""

from typing import Any, List, Dict
from ..result import CCVShopResult
from .endpoint import CCVApiEndpoints

class Productphotos(CCVApiEndpoints):
    """
    Photos of this product. The 'main photo' is shown first on the webshop.
    """

    def delete_a_product_photo(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Delete a product photo.
        """
        return self.client._delete(
            uri_path=f"/api/rest/v1/productphotos/{id}/",
        )

    def get_all_photos_of_this_product(
        self,
        id: str,
        per_page: int = 100,
        total_pages: int = 1,
        **params,
    ) -> CCVShopResult:
        """
        Get all photos of this product.
        """
        return self.client._get_paged(
            uri_path=f"/api/rest/v1/products/{id}/productphotos/",
            per_page=per_page,
            total_pages=total_pages,
            **params,
        )

    def get_one_product_photo(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Get one product photo.
        """
        return self.client._get(
            uri_path=f"/api/rest/v1/productphotos/{id}/",
        )

    def patch_a_product_photo(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Patch a product photo.
        """
        return self.client._patch(
            uri_path=f"/api/rest/v1/productphotos/{id}/",
            body=body,
        )

    def add_a_photo_to_this_product(
        self,
        id: str,
        body: Dict,
    ) -> CCVShopResult:
        """
        Add a photo to this product.
        """
        return self.client._post(
            uri_path=f"/api/rest/v1/products/{id}/productphotos/",
            body=body,
        )

    def replace_a_product_photo_collection_of_an_existing_product_all_existing_photos_will_be_deleted_with_an_empty_collection_you_can_achieve_a_delete_all_product_photos(
        self,
        id: str,
    ) -> CCVShopResult:
        """
        Replace a product photo collection of an existing product. All existing photos will be deleted. With an empty collection you can achieve a DELETE ALL product photos.
        """
        return self.client._put(
            uri_path=f"/api/rest/v1/products/{id}/productphotos/",
        )